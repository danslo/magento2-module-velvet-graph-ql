enum ScopeType {
    default
    websites
    groups
    stores
}

type Scope {
    name: String!
    type: ScopeType!
    scope_id: Int
    disabled: Boolean!
    children: [Scope!]!
}

type VelvetGridCustomer {
    entity_id: Int!
}

type VelvetCmsBlock {
    block_id: Int!
}

input VelvetCmsBlockInput {
    block_id: Int
}

type VelvetCmsPage {
    page_id: Int!
}

# todo: can we schema stitch this?
union GridItem @typeResolver(class: "Danslo\\VelvetGraphQl\\Model\\Resolver\\UnionTypeResolver") =
    VelvetCmsPage | VelvetCmsBlock | VelvetGridOrder | VelvetGridCustomer

input GridInput {
    page_size: Int
    page_number: Int
}

type GridOutput {
    items: [GridItem!]!
    total_items: Int!
    last_page_number: Int!
}

type Query {
    cmsPageGrid(input: GridInput): GridOutput! @resolver(class: "Danslo\\VelvetGraphQl\\Model\\Resolver\\Cms\\Page\\Grid")
    cmsBlockGrid(input: GridInput): GridOutput! @resolver(class: "Danslo\\VelvetGraphQl\\Model\\Resolver\\Cms\\Block\\Grid")
    customerGrid(input: GridInput): GridOutput! @resolver(class: "Danslo\\VelvetGraphQl\\Model\\Resolver\\Customer\\Grid")
    block(block_id: Int!): VelvetCmsBlock! @resolver(class: "Danslo\\VelvetGraphQl\\Model\\Resolver\\Entity\\Loader\\CmsBlock")
}

type Mutation {
    generateAdminToken(username: String!, password: String!): String! @resolver(class: "Danslo\\VelvetGraphQl\\Model\\Resolver\\GenerateAdminToken")
    saveBlock(input: VelvetCmsBlockInput!): VelvetCmsBlock! @resolver(class: "Danslo\\VelvetGraphQl\\Model\\Resolver\\Entity\\Persister\\CmsBlock")
}
